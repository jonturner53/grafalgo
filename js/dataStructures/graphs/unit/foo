	nextAlist(sc) {
		let cursor = sc.cursor;
		let u = sc.nextIndex();
		if (u == 0) { sc.reset(cursor); return false; }
		if (u > this.n) this.expand(u, this.m);
		if (!sc.verify('[')) { sc.reset(cursor); return false; }
		while (!sc.verify(']')) {
			if (this.nextNabor(u, sc) == 0) {
				sc.reset(cursor); return false;
			}
		}
		return true;
	}

	/** Get the neighbor of a given vertex from a scanner add connecting
	 *  edge to this Graph.
	 *  @param u is a vertex in the graph.
	 *  @param sc is a scanner that has been initialized with a string
	 *  representing a Graph and the next index to be scanned represnets
	 *  a neighbor of u, possibly followed by an explicit edge number.
	 *  @return the edge number for the new edge, if the operation was
	 *  successful, else 0.
	 */
